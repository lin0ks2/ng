/* ==========================================================
 * view.dicts.js ‚Äî –≠–∫—Ä–∞–Ω ¬´–°–ª–æ–≤–∞—Ä–∏¬ª
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —è–∑—ã–∫–∞–º –≤ —Ç–∞–±–∞—Ö, —Ç–∞–±–ª–∏—Ü–∞ —Å–ª–æ–≤–∞—Ä–µ–π.
 * –ù–ï–¢ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ App.Decks.
 * ========================================================== */

(function () {
  'use strict';
  const A = (window.App = window.App || {});
  const VIEWS = (A.Views = A.Views || {});

  /** –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞—Ä–∏ –∏–∑ App.Decks. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç
   * [{ key, lang, name, flag, count }, ...]  */
  function collectDecks() {
    const out = [];

    // 1) –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –ø—É—Ç—å: —á–µ—Ä–µ–∑ registry / list / keys
    const registry = (A.Decks && (A.Decks.registry || A.Decks._registry)) || null;
    const keys = (A.Decks?.list?.() || A.Decks?.keys?.() || (registry && Object.keys(registry)) || []);

    keys.forEach((key) => {
      try {
        const items = A.Decks.resolveDeckByKey ? (A.Decks.resolveDeckByKey(key) || []) : (registry?.[key]?.items || []);
        const name  = A.Decks.resolveNameByKey ? A.Decks.resolveNameByKey(key) : (registry?.[key]?.name || key);
        const flag  = A.Decks.flagForKey ? A.Decks.flagForKey(key) : (registry?.[key]?.flag || 'üè≥Ô∏è');
        const lang  = (registry?.[key]?.lang) || key.split('_')[0]; // fallback: –ø—Ä–µ—Ñ–∏–∫—Å –¥–æ "_"
        out.push({ key, lang, name, flag, count: items.length|0 });
      } catch(_){}
    });

    // 2) –§–æ–ª–ª–±–µ–∫: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
    if (!out.length) {
      // –ø–æ–ø—Ä–æ–±—É–µ–º —Å–∞–º—ã–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª—é—á–∏
      ['de_verbs','de_nouns','en_verbs','en_nouns'].forEach((key)=>{
        try {
          const items = (A.Decks?.resolveDeckByKey?.(key) || []);
          if (items.length) {
            out.push({
              key,
              lang: key.split('_')[0],
              name: A.Decks?.resolveNameByKey?.(key) || key,
              flag: A.Decks?.flagForKey?.(key) || (key.startsWith('de') ? 'üá©üá™' : 'üè≥Ô∏è'),
              count: items.length
            });
          }
        } catch(_){}
      });
    }

    return out;
  }

  /** –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —è–∑—ã–∫—É */
  function groupByLang(rows) {
    const m = new Map();
    rows.forEach(r => {
      if (!m.has(r.lang)) m.set(r.lang, []);
      m.get(r.lang).push(r);
    });
    // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ —Å–ª–æ–≤–∞—Ä—è –≤–Ω—É—Ç—Ä–∏ –≤–∫–ª–∞–¥–∫–∏
    for (const arr of m.values()) arr.sort((a,b)=>a.name.localeCompare(b.name, 'ru'));
    return m;
  }

  /** –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –≤–∫–ª–∞–¥–∫–∏ —è–∑—ã–∫–æ–≤ */
  function renderTabs(root, langs, activeLang, onPick) {
    const wrap = document.createElement('div');
    wrap.className = 'dicts-tabs';

    langs.forEach(lang => {
      const meta = langMeta(lang);
      const btn = document.createElement('button');
      btn.className = 'dicts-tab' + (lang === activeLang ? ' active' : '');
      btn.innerHTML = `<span class="flag">${meta.flag}</span><span>${meta.title}</span>`;
      btn.addEventListener('click', () => onPick(lang), { passive: true });
      wrap.appendChild(btn);
    });

    root.appendChild(wrap);
  }

  /** –¢–∞–±–ª–∏—Ü–∞ —Å–ª–æ–≤–∞—Ä–µ–π –ø–æ —è–∑—ã–∫—É */
  function renderTable(root, rows) {
    const card = document.createElement('div');
    card.className = 'dicts-card';

    if (!rows.length) {
      const empty = document.createElement('div');
      empty.className = 'dicts-empty';
      empty.textContent = '–°–ª–æ–≤–∞—Ä–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
      card.appendChild(empty);
      root.appendChild(card);
      return;
    }

    const table = document.createElement('table');
    table.className = 'dicts-table';

    table.innerHTML = `
      <thead>
        <tr>
          <th>–°–ª–æ–≤–∞—Ä—å</th>
          <th>–°–ª–æ–≤</th>
          <th></th>
        </tr>
      </thead>
      <tbody></tbody>
    `;

    const tbody = table.querySelector('tbody');

    rows.forEach(r => {
      const tr = document.createElement('tr');

      // –ò–º—è —Å–ª–æ–≤–∞—Ä—è + —Ñ–ª–∞–≥
      const tdName = document.createElement('td');
      tdName.className = 'dicts-name';
      tdName.innerHTML = `<span class="flag">${r.flag}</span><span>${r.name}</span>`;
      tr.appendChild(tdName);

      // –ö–æ–ª-–≤–æ —Å–ª–æ–≤
      const tdCount = document.createElement('td');
      tdCount.className = 'dicts-count';
      tdCount.textContent = String(r.count);
      tr.appendChild(tdCount);

      // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
      const tdAct = document.createElement('td');
      tdAct.style.textAlign = 'right';

      const btn = document.createElement('button');
      btn.className = 'dicts-preview-btn';
      btn.textContent = '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä';
      btn.addEventListener('click', () => {
        // –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä: –≤–µ—à–∞–µ–º –ø–æ–∑–∂–µ —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–µ–≤—å—é
        alert(`–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: ${r.name} (${r.count} —Å–ª–æ–≤)`);
      });
      tdAct.appendChild(btn);

      tr.appendChild(tdAct);
      tbody.appendChild(tr);
    });

    card.appendChild(table);
    root.appendChild(card);
  }

  /** –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∞ –¥–ª—è —Ç–∞–±–∞ (RU –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å) */
  function langMeta(code) {
    switch (code) {
      case 'de': return { title: '–ù–µ–º–µ—Ü–∫–∏–π', flag: 'üá©üá™' };
      case 'en': return { title: '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', flag: 'üá¨üáß' };
      case 'uk': return { title: '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π', flag: 'üá∫üá¶' };
      case 'ru': return { title: '–†—É—Å—Å–∫–∏–π',   flag: 'üá∑üá∫' };
      case 'es': return { title: '–ò—Å–ø–∞–Ω—Å–∫–∏–π', flag: 'üá™üá∏' };
      case 'fr': return { title: '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π', flag: 'üá´üá∑' };
      case 'it': return { title: '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π', flag: 'üáÆüáπ' };
      default:   return { title: code.toUpperCase(), flag: 'üè≥Ô∏è' };
    }
  }

  /** –ü—É–±–ª–∏—á–Ω—ã–π API —ç–∫—Ä–∞–Ω–∞ */
  VIEWS.DictList = {
    /** –†–µ–Ω–¥–µ—Ä–∏—Ç —ç–∫—Ä–∞–Ω ¬´–°–ª–æ–≤–∞—Ä–∏¬ª –≤ #app */
    init() {
      const app = document.getElementById('app');
      if (!app) return;

      // —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      const decks = collectDecks();
      const byLang = groupByLang(decks);
      const langs = Array.from(byLang.keys());
      if (!langs.length) {
        app.innerHTML = `<div class="dicts"><div class="dicts-card"><div class="dicts-empty">–°–ª–æ–≤–∞—Ä–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</div></div></div>`;
        return;
      }

      // –∞–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞ ‚Äî –ø–µ—Ä–≤–∞—è –ø–æ —Å–ø–∏—Å–∫—É
      let activeLang = langs[0];

      // –∫–æ—Ä–Ω–µ–≤–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
      const root = document.createElement('div');
      root.className = 'dicts';

      // —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
      const render = () => {
        root.innerHTML = '';
        renderTabs(root, langs, activeLang, (lang) => { activeLang = lang; render(); });
        renderTable(root, byLang.get(activeLang) || []);
      };

      // –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥
      render();

      // –º–æ–Ω—Ç–∏—Ä—É–µ–º
      app.innerHTML = '';
      app.appendChild(root);
    }
  };
})();
